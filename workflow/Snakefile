import re

# all files in fastq/ ending with ".fq.gz" are treated as samples
SAMPLES = [re.sub(".fq.gz", "", file) for file in os.listdir("00_raw")]
# SPLIT_SAMPLES = [re.sub(".fq.gz", "", file) for file in os.listdir("fastq_split/split/")]

# target organism tRNAs file:
TRNA_FASTA_TARGET = "references/hg38-mature-tRNAs.fa"
# spike-in organism tRNAs file:
TRNA_FASTA_SPIKE = "references/hg38-mature-tRNAs.fa"

################
# target rules #
################

rule all:
    input:
        expand("results/bowtie2_bam/{sample}.bam", sample=SAMPLES),
        expand("results/salmon_quants/{sample}/quant.sf", sample=SAMPLES),
        expand("results/salmon_quants/{sample}/quant.sf", sample=SPLIT_SAMPLES),
        expand("results/feature_counts/counts_{sample}.txt", sample=SAMPLES),
        expand("results/feature_counts/counts_q10_{sample}.txt", sample=SAMPLES),
        expand("results/feature_counts/counts_{sample}.txt", sample=SPLIT_SAMPLES),
        expand("results/feature_counts/counts_q10_{sample}.txt", sample=SPLIT_SAMPLES)


rule salmon_only:
    input:
        expand("results/salmon_quants/{sample}/quant.sf", sample=SAMPLES)

rule salmon_only_split:
    input:
        expand("results/salmon_quants/{sample}/quant.sf", sample=SPLIT_SAMPLES)

#############
# job rules #
#############

rule deduplicate_trna_target:
    input:
        script="scripts/deduplicate_trna.py",
        fasta=TRNA_FASTA_TARGET
    output:
        "references/target_trnas_deduplicated.fa"
    shell:
        "python {input.script} {input.fasta} {output}"
        
rule deduplicate_trna_spike:
    input:
        script="scripts/deduplicate_trna.py",
        fasta=TRNA_FASTA_SPIKE
    output:
        "references/spike_trnas_deduplicated.fa"
    shell:
        "python {input.script} {input.fasta} {output}"

rule concat_trnas:
    input:
        target="references/target_trnas_deduplicated.fa",
        spike="references/spike_trnas_deduplicated.fa"
    output:
        "references/trnas_concat.fa"
    shell:
        "cat {input.target} {input.spike} > {output}"

rule bowtie2_index:
    input:
        fasta="references/trnas_concat.fa"
    output:
        index="references/bowtie_index/trnas_concat.1.bt2"
    params:
        index_name="trnas_concat"
    log:
        "logs/bowtie2-build/bowtie2-build.log"
    conda:
        "envs/samtools.yaml"
    shell:
        "bowtie2-build {input.fasta} {params.index_name} 2> {log}"

rule make_FC_reference:
    input:
        fasta="references/trnas_concat.fa"
    output:
        saf="references/trnas_concat.saf"
    shell:
        """
        grep '>' {input.fasta} | \ 
        sed 's/>//' | sed 's/ /\t/g' | cut -f1,2 | \ 
        awk 'BEGIN{{print "GeneID", "Chr", "Start", "End", "Strand"}};{{ print $1, $1, 1, $2,"+" }}' | \ 
        sed 's/ /\t/g' > {output.saf}
        """

rule cutadapt_1_u2:
    input:
        "00_raw/{sample}.fq.gz"
    output:
        temp("01_preprocessed_fastq/temp1.{sample}.fq.gz")
    log:
        "logs/01_preprocessed_fastq/{sample}/cut1_trim2.log"
    #threads: 50
    conda:
        "envs/cutadapt.yaml"
    shell:
        "cutadapt -j {threads} -u 2 -o {output} {input} > {log}"

# rule cutadapt_1_u2_split:
#     input:
#         "fastq_split/split/{sample}.fq.gz"
#     output:
#         temp("results/preprocessed_fastq/temp1.{sample}.fq.gz")
#     log:
#         "logs/cutadapt/{sample}/cut1_trim2.log"
#     #threads: 50
#     conda:
#         "envs/cutadapt.yaml"
#     shell:
#         "cutadapt -j {threads} -u 2 -o {output} {input} > {log}"

rule cutadapt_2_5ad:
    input:
        "01_preprocessed_fastq/temp1.{sample}.fq.gz"
    output:
        temp("01_preprocessed_fastq/temp2.{sample}.fq.gz")
    log:
        "logs/01_preprocessed_fastq/{sample}/cut2_5ad.log"
    #threads:50
    conda:
        "envs/cutadapt.yaml"
    shell:
        "cutadapt -j {threads} -g TCCAACTGGATACTGGN -e 0.2 -o {output} {input} > {log}"

rule cutadapt_3_3ad:
    input:
        "01_preprocessed_fastq/temp2.{sample}.fq.gz"
    output:
        temp("01_preprocessed_fastq/temp3.{sample}.fq.gz")
    log:
        "logs/01_preprocessed_fastq/{sample}/cut3_3ad.log"
    #threads: 50
    conda:
        "envs/cutadapt.yaml"
    shell:
        "cutadapt -j {threads} -a CCAGTATCCAGTTGGAATT -e 0.2 -o {output} {input} > {log}"

rule cutadapt_4_filter:
    input:
        "01_preprocessed_fastq/temp3.{sample}.fq.gz"
    output:
        "01_preprocessed_fastq/{sample}.trimmed.fq.gz"
    log:
        "logs/01_preprocessed_fastq/{sample}/cut4_filter.log"
    #threads: 50
    conda:
        "envs/cutadapt.yaml"
    shell:
        "cutadapt -j {threads} -q 10 -m 15 -o {output} {input} > {log}"

rule align_bowtie2:
    input:
        "01_preprocessed_fastq/{sample}.trimmed.fq.gz"
    output:
        "02_alignment_bam/{sample}.bam"
    params:
        index=BOWTIE_INDEX
    log:
        "logs/02_alignment_bam/{sample}.log"
    conda:
        "envs/samtools.yaml"
    threads: 100
    shell:
        "(bowtie2 -p {threads} --min-score G,1,8 --local -D 20 "
        "-R 3 -N 1 -L 10 -i S,1,0.5 -x {params.index} "
        "-U {input} | samtools view -Sb - > {output}) 2> {log}"

# rule salmon_quant:
#     input:
#         "results/preprocessed_fastq/{sample}.trimmed.fq.gz"
#     output:
#         "results/salmon_quants/{sample}/quant.sf"
#     params:
#         index=SALMON_INDEX,
#         dir="results/salmon_quants/{sample}"
#     conda:
#         "envs/salmon.yaml"
#     threads: 100
#     shell:
#         "salmon quant -i {params.index} -l A -r {input} "
#         "-o {params.dir} --validateMappings"

# rule featureCounts:
#     input:
#         "02_alignment_bam/{sample}.bam"
#     output:
#         "03_featureCounts/counts_{sample}.txt"
#     params:
#         reference="references/trnas_concat.saf"
#     log:
#         "logs/featureCounts/{sample}.log"
#     conda:
#         "envs/subread.yaml"
#     threads: 100
#     shell:
#         "featureCounts -T 64 -d 10 -M -O -t feature -f -F SAF "
#         "-a {params.reference} -o {output} {input} 2> {log}"

rule featureCounts_q10:
    input:
        "02_alignment_bam/{sample}.bam"
    output:
        "03_featureCounts/counts_q10_{sample}.txt"
    params:
        reference="references/trnas_concat.saf"
    log:
        "logs/featureCounts/{sample}_q10.log"
    conda:
        "envs/subread.yaml"
    threads: 100
    shell:
        "featureCounts -T 64 -d 10 -M -O -t feature -f -F SAF -Q 10 "
        "-a {params.reference} -o {output} {input} 2> {log}"
